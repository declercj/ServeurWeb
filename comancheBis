#!/usr/bin/perl

if(@ARGV){

    if($ARGV[0] eq "start"){
       	lancerServeur() || exit 1;
	exit 0;
    }
    elsif($ARGV[0] eq "stop"){
	arreterServeur() || exit 1;
	exit 0;
    }
    elsif($ARGV[0] eq "status"){
	status();
    }
    else{
	die "Erreur: options disponibles: start, stop, status\n";
    }
    
}

sub lancerServeur {
    #lecture fichier de config
    lireConf();#hachage de conf $conf{clé}
    
    use Socket;
    ### création de la socket ###
    socket(SERVEUR,PF_INET,SOCK_STREAM,getprotobyname('tcp'));
    setsockopt(SERVEUR,SOL_SOCKET, SO_REUSEADDR,1);
    $mon_adresse = sockaddr_in ($conf{"port"},INADDR_ANY);
    bind(SERVEUR, $mon_adresse) || die ("bind");
    listen (SERVEUR, SOMAXCONN) || die ("listen");	
    print "Le serveur écoute sur le port $conf{\"port\"} et accepte $conf{\"clients\"} clients max\n"; 

    #création du répartiteur (qui acceptera les connexions)
    $repartiteur=fork;
    
    if($repartiteur==0){
	open(PID,">/tmp/.comanche_pid");
	print PID "$$\n";
	close(PID);
	# Gestion des connexions des clients 
	#et création des ouvriers
	$compteurClient=0;
	select(STDOUT);

	while(accept(CLIENT,SERVEUR) || die ("accept")){
	    
	    #### creation pipes #####
	    
	    pipe(LECTURE, ECRITURE);
	    pipe(READING, WRITING);
	    
	    ########################
	    
	    if($compteurClient < $conf{"clients"}){
		$compteurClient++;
		print "Nb clients : $compteurClient \n";

		while(<CLIENT>){
		    print "$_";
		    $requeteClient="$requeteClient$_";
		    if($_ =~ "^\r\n"){
			last;
		    }
		}
		#print "REQUETE :\n $requeteClient";

		$pid=fork;
		
		####### Dans le fils ############
		if($pid==0){
		    
		    ############gestion du pipe##############
		    #on ferme le premier pipe en écriture
		    close(ECRITURE);
		    #on ferme la lecture sur le second pipe
		    close(READING);
		    #On ferme le client également car il ne comminuque pas avec lui directement
		    
		    close(SERVEUR);
		    ## Enregistrement du pid du fils créé ##
		    open(PID,">>/tmp/.comanche_pid") || die "ouverture du fichier PID";
		    print PID "$$\n";
		    close(PID) || die "ouverture du fichier PID";
		    
		    
		    
		    while(<LECTURE>){
			$requete=$requete.$_;			    
			if($_ =~ "^\r\n"){
			    last;
			}
		    }
		    LECTURE->autoflush(1);
		    close(LECTURE);
		    print "$requete";
		    
		    ## Gestion de la requete ##
		    $reponse="HTTP/1.1 200 OK\r\n\r\nOK cest good\r\n\r\n"; 
		    
		    #####Envoi de la reponse au repartiteur########
		    print "j'envoie la réponse au répartiteur\n";
		    WRITING->autoflush(1);
		    print WRITING $reponse;
		    $reponse="";
		    
		    
		    close(WRITING) || die "fermeture WRITING\n";
		    exec "exit 0";
		    #################ERREUR#####################################
		    #Le processus ferme bien tous les pipes, toutes les connexions, mais ne veut pas mourir
		    #avec exit, et kill(SIGTERM, $$), le processus reste bloqué
		    # avec exec, le die fonctionne et l'erreur est "repérage non permis"
		    #Aucune idée de ce qu'il se passe...
		    #exec || die "je suis pas mort $$  Erreur: $!\n";
		    #print "je suis toujours vivant\n";
		    #################ERREUR####################################
		    
		}
		
		else{
		    #on ferme la lecture du premier pipe
		    close(LECTURE);
		    #on ferme l'ecriture du second pipe
		    close(WRITING);
		    ECRITURE->autoflush(1);
		    print ECRITURE $requeteClient;
		    
		    while(<READING>){
			$reponseOuvrier="$reponseOuvrier$_";
		    }
		    wait();
		    $compteurClient--;
		    CLIENT->autoflush(1);
		    print CLIENT $reponseOuvrier;
		    close(CLIENT);
		
		}
		
	    }
	    else{
		select(CLIENT);
		CLIENT->autoflush(1);
		print "503 Service Unavailable";
		close(CLIENT);
	    }
	    
	}
	
    }
}


sub arreterServeur{
    close(CLIENT) ;
    close(SERVEUR);
    open(PID,"/tmp/.comanche_pid");
    while(<PID>){
	kill(SIGTERM,$_);
    }
    close(PID);
}


sub status{

}

sub lireConf{
    %conf;
    open(CONFIG, "<comanche.conf") || die "Erreur lecture comanche.conf : $!";
    while(<CONFIG>){
	chomp($_);
	if($_ =~ /^#/ || $_ =~ /^$/){next;}
	if($_ =~ /^\s*set\s+(.+)\s+([^\s#]+)(?:\s*#.*)?$/){
	    $cle=$1;
	    $valeur=$2;
	    
	    if($cle =~ /port/){
		die "Erreur de configuration: port $valeur invalide" if $valeur <1 && $valeur>65535;
	    }
	    elsif($cle =~ /error/){
	    }
	    elsif($cle =~ /index/){
		#die "Erreur de configuration: $cle\n" unless -f $valeur;
	    }
	    elsif($cle =~ /logfile/){
		open(LOGFILE, ">>$valeur") || die "Erreur de configuration : logfile $valeur n'est pas disponible\n";
		close(LOGFILE) || die "Erreur fermeture $valeur\n";
	    }
	    elsif($cle =~ /clients/){
		die "Erreur de configuration: $cle $valeur n'est pas valide\n" unless $valeur =~ /\d+/;
	    }
	    else{
		die "Erreur de configuration: $cle n'est pas valide\n";
	    }
	    $conf{$cle}=$valeur;
	}
	elsif($_ =~ /^route/){}
	elsif($_ =~ /^exec/){}
	else{
	    die "Erreur de configuration: la ligne $_ n'est pas valide\n";

	}
	
    }



}
